{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/yatinsatija/Desktop/e-medic-new/e-medic-frontend/src/pages/EPHARMACY/Payment/Payment.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport \"./Payment.css\";\nimport { useStateValue } from \"../StateProvider\";\nimport CheckoutProduct from \"../Checkout/CheckoutProduct\";\nimport { Link, useHistory } from \"react-router-dom\"; // import { CardElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\n\nimport CurrencyFormat from \"react-currency-format\";\nimport { getBasketTotal } from \"../../../reducer\";\nimport Axios from \"../axios\";\nimport { storage, firestore } from \"../../../Firebase/Firebase\"; // import { db } from \"./firebase\";\n\nfunction Payment() {\n  _s();\n\n  const [{\n    basket,\n    user\n  }, dispatch] = useStateValue();\n  const history = useHistory(); // const stripe = useStripe();\n  // const elements = useElements();\n  // const [succeeded, setSucceeded] = useState(false);\n  // const [processing, setProcessing] = useState(\"\");\n  // const [error, setError] = useState(null);\n  // const [disabled, setDisabled] = useState(true);\n  // const [clientSecret, setClientSecret] = useState(true);\n  // const [orderno, setOrderNo] = useState(\"\");\n  // const [prevOrder, setPrevOrder] = useState(\"\");\n  // const [city, setCity] = useState(\"\");\n  // const [address, setAddress] = useState(\"\");\n  // const [pincode, setPincode] = useState(\"\");\n  // const [state, setState] = useState(\"\");\n  // const [orderId,setOrderID] = useState(Math.floor(Math.random()*10000));\n  // useEffect(() => {\n  //     // generate the special stripe secret which allows us to charge a customer\n  //     const getClientSecret = async () => {\n  //         const response = await axios({\n  //             method: 'post',\n  //             // Stripe expects the total in a currencies subunits\n  //             url: `/payments/create?total=${getBasketTotal(basket) * 100}`\n  //         });\n  //         setClientSecret(response.data.clientSecret)\n  //     }\n  //     getClientSecret();\n  // }, [basket])\n  // console.log(\"THE SECRET IS >>>\", clientSecret);\n  // console.log('ðŸ‘±', user)\n  // const handleSubmit = async (event) => {\n  // do all the fancy stripe stuff...\n  // event.preventDefault();\n  // setProcessing(true);\n  // const payload = await stripe.confirmCardPayment(clientSecret, {\n  //     payment_method: {\n  //         card: elements.getElement(CardElement)\n  //     }\n  // }).then(({ paymentIntent }) => {\n  //     // paymentIntent = payment confirmation\n  //     // db\n  //     //   .collection('users')\n  //     //   .doc(user?.uid)\n  //     //   .collection('orders')\n  //     //   .doc(paymentIntent.id)\n  //     //   .set({\n  //     //       basket: basket,\n  //     //       amount: paymentIntent.amount,\n  //     //       created: paymentIntent.created\n  //     //   })\n  //     // setSucceeded(true);\n  //     // setError(null)\n  //     // setProcessing(false)\n  //     dispatch({\n  //         type: 'EMPTY_BASKET'\n  //     })\n  //     history.replace('/orders')\n  // })\n  // };\n  // const handleChange = (event) => {\n  //   // Listen for changes in the CardElement\n  //   // and display any errors as the customer types their card details\n  //   setDisabled(event.empty);\n  //   setError(event.error ? event.error.message : \"\");\n  // };\n  // const [medicineList, setMedicineList] = React.useState([]);\n\n  const onOrder = e => {\n    if ((basket === null || basket === void 0 ? void 0 : basket.length) === 0) {\n      alert(\"First Add Items to the basket\");\n      history.push(\"./epharmacy\");\n    } else {\n      e.preventDefault();\n      Axios.post(\"http://localhost:3001/order\", {\n        id: localStorage.getItem(\"order\"),\n        cid: localStorage.getItem(\"email\")\n      }).then(console.log(\"YES\"));\n      basket.map(item => {\n        Axios.post(\"http://localhost:3001/basket\", {\n          mid: item.id,\n          oid: localStorage.getItem(\"order\")\n        }).then(response => {\n          console.log(response);\n        });\n      }); // firestore.settings({\n      //   timestampsInSnapshots: true,\n      // });\n\n      firestore.collection(\"orders\").add({\n        oid: localStorage.getItem(\"order\"),\n        prescription: localStorage.getItem(\"prescription\"),\n        content: localStorage.getItem(\"pcontent\")\n      }).then(() => {\n        console.log(\"Vishal\");\n        history.push(\"/myorders\");\n      }).catch(e => {\n        console.log(e);\n        alert(e.message);\n      });\n      console.log(basket);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"payment\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"payment__container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [\"Checkout (\", /*#__PURE__*/_jsxDEV(Link, {\n          to: \"/checkout\",\n          children: [basket === null || basket === void 0 ? void 0 : basket.length, \" items\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 21\n        }, this), \")\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"payment__section\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"payment__title\",\n          children: /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Delivery Address\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 144,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"payment__address\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: localStorage.getItem(\"address\")\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 149,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: localStorage.getItem(\"place\")\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 150,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: localStorage.getItem(\"state\")\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 151,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: localStorage.getItem(\"pincode\")\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"payment__section\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"payment__title\",\n          children: /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Review items and delivery\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"payment__items\",\n          children: basket.map(item => /*#__PURE__*/_jsxDEV(CheckoutProduct, {\n            id: item.id,\n            title: item.title,\n            image: item.image,\n            price: item.price,\n            rating: item.rating\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 163,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"payment__section\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"payment__title\",\n          children: /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Payment Method\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 177,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"payment__details\",\n          children: /*#__PURE__*/_jsxDEV(\"form\", {\n            onSubmit: onOrder,\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"payment__priceContainer\",\n              children: [/*#__PURE__*/_jsxDEV(CurrencyFormat, {\n                renderText: value => /*#__PURE__*/_jsxDEV(\"h3\", {\n                  children: [\"Order Total: \", value]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 187,\n                  columnNumber: 42\n                }, this),\n                decimalScale: 2,\n                value: getBasketTotal(basket),\n                displayType: \"text\",\n                thousandSeparator: true,\n                prefix: \"$\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 186,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                type: \"submit\",\n                children: \"Place Order\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 194,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 185,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 182,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 135,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Payment, \"uGKGCGx/tM9vILbRIQNFMjDKDSE=\", false, function () {\n  return [useStateValue, useHistory];\n});\n\n_c = Payment;\nexport default Payment;\n\nvar _c;\n\n$RefreshReg$(_c, \"Payment\");","map":{"version":3,"sources":["/Users/yatinsatija/Desktop/e-medic-new/e-medic-frontend/src/pages/EPHARMACY/Payment/Payment.js"],"names":["React","useState","useEffect","useStateValue","CheckoutProduct","Link","useHistory","CurrencyFormat","getBasketTotal","Axios","storage","firestore","Payment","basket","user","dispatch","history","onOrder","e","length","alert","push","preventDefault","post","id","localStorage","getItem","cid","then","console","log","map","item","mid","oid","response","collection","add","prescription","content","catch","message","title","image","price","rating","value"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./Payment.css\";\nimport { useStateValue } from \"../StateProvider\";\nimport CheckoutProduct from \"../Checkout/CheckoutProduct\";\nimport { Link, useHistory } from \"react-router-dom\";\n// import { CardElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\nimport CurrencyFormat from \"react-currency-format\";\nimport { getBasketTotal } from \"../../../reducer\";\nimport Axios from \"../axios\";\nimport { storage, firestore } from \"../../../Firebase/Firebase\";\n// import { db } from \"./firebase\";\n\nfunction Payment() {\n  const [{ basket, user }, dispatch] = useStateValue();\n  const history = useHistory();\n\n  // const stripe = useStripe();\n  // const elements = useElements();\n\n  // const [succeeded, setSucceeded] = useState(false);\n  // const [processing, setProcessing] = useState(\"\");\n  // const [error, setError] = useState(null);\n  // const [disabled, setDisabled] = useState(true);\n  // const [clientSecret, setClientSecret] = useState(true);\n  // const [orderno, setOrderNo] = useState(\"\");\n  // const [prevOrder, setPrevOrder] = useState(\"\");\n  // const [city, setCity] = useState(\"\");\n  // const [address, setAddress] = useState(\"\");\n  // const [pincode, setPincode] = useState(\"\");\n  // const [state, setState] = useState(\"\");\n  // const [orderId,setOrderID] = useState(Math.floor(Math.random()*10000));\n\n  // useEffect(() => {\n  //     // generate the special stripe secret which allows us to charge a customer\n  //     const getClientSecret = async () => {\n  //         const response = await axios({\n  //             method: 'post',\n  //             // Stripe expects the total in a currencies subunits\n  //             url: `/payments/create?total=${getBasketTotal(basket) * 100}`\n  //         });\n  //         setClientSecret(response.data.clientSecret)\n  //     }\n\n  //     getClientSecret();\n  // }, [basket])\n\n  // console.log(\"THE SECRET IS >>>\", clientSecret);\n  // console.log('ðŸ‘±', user)\n\n  // const handleSubmit = async (event) => {\n  // do all the fancy stripe stuff...\n  // event.preventDefault();\n  // setProcessing(true);\n\n  // const payload = await stripe.confirmCardPayment(clientSecret, {\n  //     payment_method: {\n  //         card: elements.getElement(CardElement)\n  //     }\n  // }).then(({ paymentIntent }) => {\n  //     // paymentIntent = payment confirmation\n\n  //     // db\n  //     //   .collection('users')\n  //     //   .doc(user?.uid)\n  //     //   .collection('orders')\n  //     //   .doc(paymentIntent.id)\n  //     //   .set({\n  //     //       basket: basket,\n  //     //       amount: paymentIntent.amount,\n  //     //       created: paymentIntent.created\n  //     //   })\n\n  //     // setSucceeded(true);\n  //     // setError(null)\n  //     // setProcessing(false)\n\n  //     dispatch({\n  //         type: 'EMPTY_BASKET'\n  //     })\n\n  //     history.replace('/orders')\n  // })\n  // };\n\n  // const handleChange = (event) => {\n  //   // Listen for changes in the CardElement\n  //   // and display any errors as the customer types their card details\n  //   setDisabled(event.empty);\n  //   setError(event.error ? event.error.message : \"\");\n  // };\n  // const [medicineList, setMedicineList] = React.useState([]);\n\n  const onOrder = (e) => {\n    if (basket?.length === 0) {\n      alert(\"First Add Items to the basket\");\n      history.push(\"./epharmacy\");\n    } else {\n      e.preventDefault();\n      Axios.post(\"http://localhost:3001/order\", {\n        id: localStorage.getItem(\"order\"),\n        cid: localStorage.getItem(\"email\"),\n      }).then(console.log(\"YES\"));\n\n      basket.map((item) => {\n        Axios.post(\"http://localhost:3001/basket\", {\n          mid: item.id,\n          oid: localStorage.getItem(\"order\"),\n        }).then((response) => {\n          console.log(response);\n        });\n      });\n      // firestore.settings({\n      //   timestampsInSnapshots: true,\n      // });\n      firestore\n        .collection(\"orders\")\n        .add({\n          oid: localStorage.getItem(\"order\"),\n          prescription: localStorage.getItem(\"prescription\"),\n          content: localStorage.getItem(\"pcontent\"),\n        })\n        .then(() => {\n          console.log(\"Vishal\");\n          history.push(\"/myorders\");\n        })\n        .catch((e) => {\n          console.log(e);\n          alert(e.message);\n        });\n      console.log(basket);\n    }\n  };\n\n  return (\n    <div className=\"payment\">\n      <div className=\"payment__container\">\n        <h1>\n          Checkout (<Link to=\"/checkout\">{basket?.length} items</Link>)\n        </h1>\n\n        {/* Payment section - delivery address */}\n        <div className=\"payment__section\">\n          <div className=\"payment__title\">\n            <h3>Delivery Address</h3>\n          </div>\n          <div className=\"payment__address\">\n            {/* <p>{user?.email}</p> */}\n\n            <p>{localStorage.getItem(\"address\")}</p>\n            <p>{localStorage.getItem(\"place\")}</p>\n            <p>{localStorage.getItem(\"state\")}</p>\n            <p>{localStorage.getItem(\"pincode\")}</p>\n          </div>\n        </div>\n\n        {/* Payment section - Review Items */}\n        <div className=\"payment__section\">\n          <div className=\"payment__title\">\n            <h3>Review items and delivery</h3>\n          </div>\n          <div className=\"payment__items\">\n            {basket.map((item) => (\n              <CheckoutProduct\n                id={item.id}\n                title={item.title}\n                image={item.image}\n                price={item.price}\n                rating={item.rating}\n              />\n            ))}\n          </div>\n        </div>\n\n        {/* Payment section - Payment method */}\n        <div className=\"payment__section\">\n          <div className=\"payment__title\">\n            <h3>Payment Method</h3>\n          </div>\n          <div className=\"payment__details\">\n            {/* Stripe magic will go */}\n\n            <form onSubmit={onOrder}>\n              {/* <CardElement onChange={handleChange}/> */}\n\n              <div className=\"payment__priceContainer\">\n                <CurrencyFormat\n                  renderText={(value) => <h3>Order Total: {value}</h3>}\n                  decimalScale={2}\n                  value={getBasketTotal(basket)}\n                  displayType={\"text\"}\n                  thousandSeparator={true}\n                  prefix={\"$\"}\n                />\n                <button type=\"submit\">Place Order</button>\n              </div>\n\n              {/* Errors */}\n              {/* {error && <div>{error}</div>} */}\n            </form>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Payment;\n"]},"metadata":{},"sourceType":"module"}